****** 02.플라이 웨이트 패턴 ******

* 플라이웨이트 패턴은 비용이 큰 자원을 공통으로 사용할 수 있도록 만드는 패턴이다.

* 자원에 대한 비용은 크게 두 가지로 나눠 볼 수 있다.

1. 중복 생성될 가능성이 높은 경우
-> 중복 생성될 가능성이 높다는 것은 동일한 자원이 자주 사용될 가능성이 매우 높다는 것을 의미한다.
   이러한 자원은 공통 자원 형태로 관리해 주는 편이 좋다.
2. 자원 생성 비용은 큰데 사용 빈도가 낮은 경우.
-> 이런 자원을 항상 미리 생성해 두는 것은 낭비이다. 따라서 요청이 있을 때에 생성해서 제공해주는 편이 좋다.

**
이 두가지 목적을 위해서 플라이웨이트 패턴은 자원 생성과 제공을 책임진다.
자원을 생성을 담당하는 Factory 역할과 관리 역할을 분리하는 것이 좋을 수 있으나, 일반적으로는
두 역할의 크기가 그리 크지 않아서 하나의 클래스가 담당하도록 구현한다.

* 예시)
게임 상에서 같은 나무를 표현할 때 기본적인 위치정보와 함께, 나무의 구조, 껍질, 입사귀들의 요소를 가지고 구성할 수 있다.
- 구조
- 껍질
- 입사귀
- 위치정보

이렇게 4가지가 있을 때 각각의 나무에 대해 4가지 객체를 모두 가지고 있으면 메모리가 매우 많이 소비된다.
따라서 공통되는 구조, 껍질, 입사귀 객체를 공유하는 방식으로 객체를 구성하고 위치정보만 각 나무가 가지고 있도록 구성한다.

* 플라이 웨이트 패턴 장단점
1. 장점
- 많은 객체를 만들 때 성능을 향상 시킬 수 있다.
- 많은 객체를 만들 때 메모리를 줄일 수 있다.
- state pattern 과 쉽게 결합 할 수 있다.

2.단점
- 특정 인스턴스의 공유 컴포넌트를 다르게 행동하게 하는 것이 불가능하다.(개별 설정이 불가능하다)

jdk 예제
java.lang.String
java.lang.Integer#valueOf(int)
java.lang.Boolean#valueOf(boolean)
java.lang.Byte#valueOf(byte)
java.lang.Character#valueOf(char)
