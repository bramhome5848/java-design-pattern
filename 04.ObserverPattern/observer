****** 04.옵저버 패턴 ******

* 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로
  일대다(one-to-many) 의존성을 정의한다.

* Java9 에서 Observable 이 Deprecated 되었다.

* Subject 객체
* Observer 객체1
* Observer 객체2
* Observer 객체3

-> Subject 객체의 특정 값이 변경된 것을 Observer 객체에서 변경된 것 감지 후 값의 변경에 따른 필요한 동작 수행

* 자바 내장 옵저버 패턴 사용
- java.util.Observer 인터페이스와 java.util.Observable 클래스를 사용할 수 있음
- 자바 내장 옵저버 패턴은 푸시 방식, 풀 방식 모두 사용 가능

* 수행 방식

1. java.util.Observer 인터페이스를 구현하고 java.util.Observable 객체의 addObserver() 메서드를
   호출하면 옵저버 목록에 추가가 되고 deleteObserver()를 호출하면 옵저버 목록에서 제거기 된다.

2. 연락을 돌리는 방법은 java.util.Observable 를 상속받는 subject 클래스에서 setChagned() 메소드를
   호출해서 객체의 상태가 바뀌었다는 것을 알린 후 notifyObservers() 또는 notifyObserver(Object arg)
   메소드를 호출하면 된다.(인자값을 넣어주는 메소드는 푸시방식으로 쓰임)

3. 옵저버 객체가 연락을 받는 방법은 update(Observable o, Object arg) 메소드를 구현하기만 하면 된다.
   Observable o 에는 연락을 보내는 subject 객체가 인자로 전달이 되고 Object arg 에는
   notifyObservers(Object arg) 메서드에서 인자로 전달된 데이터 객체가 넘언온다.

* 자바 내장 옵저버 패턴이 단점과 한계

1. Observable 은 클래스다.
-> Observable 이 클래스기 때문에 서브클래스를 만들어야 한다는 점이 문제다. 이미 다른 수퍼클래스를 확장하고 있는 클래스에서
   Observable 의 기능을 추가할 수 없기 때문이다. 그래서 재사용성에 제약이 생긴다.

2. Observable 클래스의 핵심 메소드를 외부에서 호출할 수 없다.
-> Observable API 를 살펴호면, setChanged() 메소드가 protected 로 선언되어 있다.
   Observable 의 서브클래스에서만 setChanged() 를 호출할 수 있다. 결국 직접 어떤 클래스를 만들고
   Observable 의 서브클래스를 인스턴스 변수로 사용하는 방법도 쓸 수 없다. 이런 디자인은 상속보다는 구성을 사용한다는
   디자인 원칙에도 위배된다.

* 옵저버 패턴이 사용되는 곳
- Android 의 view or Button 등의 위젯의 각종 이벤트를 받을 때 쓰인다.
- 버튼은 항상 클릭이라는 이벤트가 있으며 이 이벤트는 OnCLickListener 라는 인터페이스로 구성되어 있다.

Button -> Publisher
OnClickListener -> Observer

- 버튼 상태가 변경(클릭)된다면 OnClickListener 로 알려준다.