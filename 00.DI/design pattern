****** 00-1. 디자인 패턴 이해하기 ******

* 알고리즘
-> 문제 해결을 위한 처리 절차
-> 상황에 맞는 최적의 방법을 선택하요 사용
-> 정답을 갖는 처리 절차 사용

* 디자인 패턴

1. 효율적인 프로그래밍을 하고 있다고 판단하는 기준
- 중복된 코드가 없다.
- 변경된 요구 사항을 순조롭게 받아들일 수 있어야 한다.

2. 디자인 패턴을 적용하여 프로그램을 만드는 중요한 이유는 다양한 추가 요구 사항에 대해 좀 더 쉽게 대응하기 위해서이다.
   즉 쉽게 코드를 수정할 수 있게 하기 위해서이다.
- 과거에 이런 상황에 이렇게 하니 요구사항 변경에 따라 코드 수정을 하기 좋았다(나의 경험, 다른 사람의 경험)

3. 디자인 패턴도 같은 상황에 하나의 패턴만이 정답은 아니다.
- 가성비를 따질 수도 있고 여러 가지 상황에 따라 적절한 패턴을 적용하게 된다.

4. 학습할 내용
- 오지지널 파운데이션 패턴 9가지
- 싱플턴 패턴
- 플라이웨이트 패턴
- 빌더 패턴
- 옵저버 패턴
- 어댑터 패턴
- 파사드 패턴
- 데코레이션 패턴
- 브릿지 패턴
- 스트래티지 패턴

****** 00-2. 클래스의 특성을 이용한 디자인 패턴의 시작 ******

* 클래스의 특성을 이용한 디자인패턴의 시작
1. 밸류타입 사이에서의 변환
2. 레퍼턴스타입 사이에서의 형변환
-> 클래스 사이에서도 형변환이 일어나는데, 클래스 사이의 형변환은 상위클래스와 하위클래스 사이에서 일어나게 된다.
-> 하위클래스 객체는 상위클래스의 객체에 대입할 수 있다.

3. 하위클래스 객체를 상위클래스 객체에 대입할 수 있다.
-> 상위 클래스 변수형에 하위 클래스 객체를 담을 수 있음
-> 반대의 경우는 수행할 수 없음
-> 하위 클래스가 상위 클래스의 확장형이기 때문에


****** 00-3. DI(Dependency Injection) ******

* 객체를 사용하는 두 가지 방법
1. A 객체가 B, C 객체를 직접 생성
-> 직접 생성의 경우 생성부터 메모리 관리를 위한 소멸까지 해당 객체의 라이프 사이클을 개발자가 모두 관리 : 강한 결합
2. B, C 객체가 외부에서 생성되어 A객 체에 주입
-> 이미 생성되어 있는 객체를 주입 받으면 사용만 하면 되기 때문에 개발자가 관리할 것이 적어짐 : 약한 결합