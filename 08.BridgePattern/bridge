****** 08.브릿지 패턴 ******

* Bidge 패턴을 이해하기 위해서는 다음을 먼저 이해해야 한다.
- 기능 클래스 계층
- 구현 클래스 계층

* 말을 조금 바꿔서 다음 두 가지 경우로 나눠서 생각해볼 수 있다.
- 1. 새로운 기능을 추가하고 싶은 경우
- 2. 새로운 구현을 추가하고 싶은 경우

이제 우리는 하위의 구상 클래스를 만들려고 할 때, 의도를 확인해봐야 한다.
"나는 기능을 추가하려고 하는가?" or "구현을 추가하려고 하는가?"

* '기능의 클래스 계층'과 '구현의 클래스 계층'을 두개의 독립된 클래스 계층으로 분리한다.
* 단순히 분리만 하면 흩어져 버리기 때문에 두 개의 클래스 계층 사이에 다리를 놓는 일이 필요하다.
* 브릿지 패턴은 이런 기능의 계층과 구현의 계층을 연결시키는 패턴이다.

* adapter 패턴과 매우 흡사하며, 다음과 같은 효과를 가진다.
- 장점 : 인터페이스와 실제 구현부를 서로 다른 방식으로 변경해야 할 경우 유용하다.
- 단점 : 디자인이 복잡해진다.