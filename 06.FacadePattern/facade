****** 06.파사드 패턴 ******

* Gof 서적에 따르면 Facade 패턴은 "하위 시스템을 보다 쉽게 사용할 수 있게 해주는 고급 인터페이스를 정의한다"
  라고 되어 있다.

* Facade 패턴은 어댑터 패턴과 거의 같은 방식으로 작동하지만 서로 다른 목적을 가지고 있다.
- Adapter 패턴은 원래 코드를 다른 코드와 작동할 수 있는 래퍼를 제공한다.
- Facade 패턴은 원래 코드를 더 쉽게 처리할 수 있는 래퍼를 제공한다.

* Facade 디자인 패턴은 오브젝트나 클래스 인터페이스가 작동하기에 너무 어려울 경우, 쉽게 사용할 수 있는 프론트엔트 인터페이스를 제공한다.
- 캠슐화되지 않은 코드를 처리 할 때 Facade 패턴을 사용한다.
- 원하는 코드를 다시 작성할 수 없을 때 일반적으로 Facade 패턴을 사용한다.
-> Facade 를 사용하면 문제를 해결할 수 있지만 기본 코드가 변경되면 Facade 패턴도 변경해야 한다.

* Facade 의 특징은 여러가지 복잡한 것들을 하나로 간주해서 편하게 다루는 방법이다.
  그렇기에 Facade 패턴을 사용하면 최소 단위로 클래스를 설계할 수 있게 된다.(물론 지나치게 잘게 쪼개는 것도 바람직 하지는 않다)

  예를 들면 Computer, Light, Radio 라는 클래스들을 만들지 않고, Home 클래스 안에다가 기능을 넣을 수 있다.
  그런데 Computer 가 꼭 Home 에 종속되어야 하는 것인가?

  Computer 를 분리시키지 않는다면 Office 클래스가 나왔을 때, Computer 클래스의 기능을 다시 구현해야 하는 사태가 발생한다.